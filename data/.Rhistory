lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross
+ movieData3$budget + movieData3$profits + movieData3$imdb_score +
movieData3$num_critic_for_reviews + movieData3$num_user_for_reviews ,data = movieData3)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross
+ movieData3$budget ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross
+ movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users  ,data = movieData3)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$profits + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
summary(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
summary(lmfit.movieData)
vif(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoRotten + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
vif(lmfit.movieData)
lmfit.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
summary(lmfit.movieData)
vif(lmfit.movieData)
lmfit2.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$duration ,data = movieData3)
summary(lmfit2.movieData)
vif(lmfit2.movieData)
vif(lmfit1.movieData)
lmfit1.movieData <- lm(movieData3$imdb_score ~ movieData3$cast_total_facebook_likes + movieData3$gross + movieData3$budget + movieData3$num_critic_for_reviews +movieData3$num_user_for_reviews + movieData3$tomatoUserRating + + movieData3$tomatoRating + movieData3$tomatoReviews + movieData3$tomatoFresh + movieData3$tomatoUserMeter + movieData3$tomatoUserReviews + movieData3$num_voted_users +  movieData3$imdbVotes + movieData3$duration ,data = movieData3)
vif(lmfit1.movieData)
predictedScore <- predict(lmfit2.movieData)
predictedScore
RSFE_v = movieData3 - pred
RSFE_v = movieData3 - predictedScore
RSFE_v = movieData3$imdb_score - predictedScore
RSFE_v <- movieData3$imdb_score - predictedScore
RSFE <- sum(RSFE_v)
absRSFE <- abs(RSFE)
MAD <- absRSFE / length(RSFE_v)
TS <-RSFE/ MAD
RSFE_v <- movieData3$imdb_score - predictedScore
RSFE_v
RSFE <- sum(RSFE_v)
RSFE
absRSFE <- abs(RSFE)
absRSFE
length(RSFE_v)
MAD <- absRSFE / length(RSFE_v)
MAD
predictedScore <- predict(lmfit2.movieData)
predictedScore
RSFE_v <- movieData3$imdb_score - predictedScore
RSFE_v
MAD <- absRSFE / length(RSFE_v)
MAD
print(c("Mean Absolute Deviation" , MAD))
summary(lmfit2.movieData)
write.csv(movieData3, file = "MyData.csv")
RSFE_v
print(c("Mean Absolute Deviation" , MAD))
k.means.fit <- kmeans(movieData3, 10)
movieData3
row.has.na <- apply(movieData3, 1, function(x){any(is.na(x))})
numberOfNAs <- sum(row.has.na)
numberOfNAs
k.means.fit <- kmeans(movieData3[,c(7,12:26,38)], 10, nstart = 20)
attributes(k.means.fit)
k.means.fit$centers
k.means.fit$cluster
k.means.fit <- kmeans(movieData3[,c(7,12:26,38)], 20, nstart = 20)
k.means.fit$cluster
k.means.fit$size
wssplot <- function(data, nc=15, seed=1234) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data[,c(7,12:26,38)], centers=i)$withinss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(movieData3, nc=6)
wssplot(movieData3, nc=50)
wssplot(movieData3, nc=100)
wssplot(movieData3, nc=25)
attributes(k.means.fit)
wssplot <- function(data, nc=15, seed=1234) {
# wss <- (nrow(data)-1)*sum(apply(data,2,var))
bss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc) {
set.seed(seed)
# wss[i] <- sum(kmeans(data[,c(7,12:26,38)], centers=i)$withinss)
bss[i] <- sum(kmeans(data[,c(7,12:26,38)], centers=i)$betweenss)
}
plot(1:nc, bss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
}
wssplot(movieData3, nc=25)
wssplot <- function(data, nc=15, seed=1234) {
wss <- (nrow(data)-1)*sum(apply(data,2,var))
bss <- (nrow(data)-1)*sum(apply(data,2,var))
for (i in 2:nc) {
set.seed(seed)
wss[i] <- sum(kmeans(data[,c(7,12:26,38)], centers=i)$withinss)
bss[i] <- sum(kmeans(data[,c(7,12:26,38)], centers=i)$betweenss)
}
plot(1:nc, wss, type="b", xlab="Number of Clusters",
ylab="Within groups sum of squares")
plot(1:nc, bss, type="b", xlab="Number of Clusters",
ylab="Between groups sum of squares")
}
wssplot(movieData3, nc=25)
wssplot(movieData3, nc=35)
,c(7,12:26,38)
k.means.fit <- kmeans(movieData3[,c(7,12:26,38)], 20, nstart = 20)
k.means.fit$centers
k.means.fit$size
sizeVector
sizeVector <- k.means.fit$size
sizeVector
sum(sizeVector)
attributes(k.means.fit)
table(movieData3[,15],k.means.fit$cluster)
k.means.fit$cluster
k.means.fit$size
sizeVector <- k.means.fit$size
sum(sizeVector)
k.means.fit <- kmeans(movieData3[,c(7,12:26,38)], 20, nstart = 10)
attributes(k.means.fit)
k.means.fit$centers
k.means.fit$cluster
k.means.fit$size
sizeVector <- k.means.fit$size
sum(sizeVector)
k.means.fit <- kmeans(movieData3[,c(7,12:26,38)], 20)
attributes(k.means.fit)
k.means.fit$centers
k.means.fit$cluster
k.means.fit$size
sizeVector <- k.means.fit$size
sum(sizeVector)
k.means.fit$cluster
k.means.fit$size
dim(movieData3)
k.means.fit
attributes(k.means.fit)
k.means.fit$centers
attributes(k.means.fit)
k.means.fit$centers$means
k.means.fit$centers
k.means.fit$centers$imdb_score
k.means.fit$centers
kmeansPrediction <- as.data.frame(k.means.fit$centers)
View(kmeansPrediction)
View(kmeansPrediction)
kmeansPrediction <- kmeansPrediction[,5]
library(caret)
intrain<-createDataPartition(y=movieData3,p=0.7,list=FALSE)
intrain<-createDataPartition(y=movieData3$imdb_score,p=0.7,list=FALSE)
training<-m_train[intrain,]
testing<-m_train[-intrain,]
require(caTools)
library(caTools)
set.seed(101)
sample = sample.split(movieData3, SplitRatio = .75)
train = subset(movieData3, sample == TRUE)
test = subset(movieData3, sample == FALSE)
k.means.fit <- kmeans(train[,c(7,12:26,38)], 20)
kmeansPrediction <- as.data.frame(k.means.fit$centers)
kmeansPrediction <- kmeansPrediction[,5]
kmeansPrediction
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[,1:10], 1, closest.cluster)
k.means.fit$centers
closest.cluster <- function(x) {
cluster.dist <- apply(kmeansPrediction, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[,1:10], 1, closest.cluster)
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[,1:10], 1, closest.cluster)
test[,1:10]
test[1:10,]
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,], 1, closest.cluster)
clusters2 <- apply(test[1:10,], 1, closest.cluster)
k.means.fit$centers
test[1:10,]
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
k.means.fit$size
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c("1", "cluster: " ,(which.min(cluster.dist)[1])))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
clusters2 <- apply(test[,c(7,12:26,38)], 1, closest.cluster)
length(clusters2)
kmeansPrediction
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]], x$imdb_score))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
return(which.min(cluster.dist)[1])
}
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
predictedScoresUsingKMC <- c()
index <- 1
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
predictedScoresUsingKMC[index] <- kmeansPrediction[which.min(cluster.dist)[1]]
index <- index + 1
return(which.min(cluster.dist)[1])
}
predictedScoresUsingKMC
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
predictedScoresUsingKMC
predictedScoresUsingKMC <- c()
index <- 1
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
predictedScoresUsingKMC[index] <- kmeansPrediction[which.min(cluster.dist)[1]]
index <- index + 1
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
predictedScoresUsingKMC
KMCpredictedScores <- c()
index <- 1
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
# KMCpredictedScores
index <- index + 1
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
sample <- c()
index <- 1
for (i in i:200) {
sample[index] <- i;
index <- index + 1;
}
sample
for (i in 1:200) {
sample[index] <- i;
index <- index + 1;
}
sample
sample
sample <- c()
index <- 1
for (i in 1:200) {
sample[index] <- i;
index <- index + 1;
}
sample
sample <- c()
index <- 1
for (i in 1:200) {
sample <- i;
index <- index + 1;
}
sample
sample <- c()
index <- 1
for (i in 1:200) {
sample[] <- i;
index <- index + 1;
}
sample
sample <- c()
index <- 1
for (i in 1:200) {
sample[index] <- i;
index <- index + 1;
}
sample
KMCpredictedScores <- c()
index <- 1
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
# KMCpredictedScores
KMCpredictedScores[index] <- kmeansPrediction[which.min(cluster.dist)[1]]
index <- index + 1
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
KMCpredictedScores
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
return(which.min(cluster.dist)[1])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
clusters2
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
# return(which.min(cluster.dist)[1])
return (kmeansPrediction[which.min(cluster.dist)[1]])
}
clusters2 <- apply(test[1:10,c(7,12:26,38)], 1, closest.cluster)
clusters2
differenceOfScores <- test$imdb_score - clusters2
differenceOfScores <- test[1:10,]$imdb_score - clusters2
differenceOfScores
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
return (kmeansPrediction[which.min(cluster.dist)[1]])
}
clusters2 <- apply(test[,c(7,12:26,38)], 1, closest.cluster)
length(clusters2)
differenceOfScores <- test[,]$imdb_score - clusters2
differenceOfScores
closest.cluster <- function(x) {
cluster.dist <- apply(k.means.fit$centers, 1, function(y) sqrt(sum((x-y)^2)))
print(c( "cluster: " ,(which.min(cluster.dist)[1]), kmeansPrediction[which.min(cluster.dist)[1]]))
print( kmeansPrediction[which.min(cluster.dist)[1]])
return (kmeansPrediction[which.min(cluster.dist)[1]])
}
clusters2 <- apply(test[,c(7,12:26,38)], 1, closest.cluster)
RSFE_v1 <- test$imdb_score - clusters2
RSFE_v1
RSFE1 <- sum(RSFE_v1)
RSFE1
absRSFE1 <- abs(RSFE1)
absRSFE1
length(RSFE_v1)
MAD1 <- absRSFE1 / length(RSFE_v1)
MAD1
print(c("Mean Absolute Deviation" , MAD1))
print(c("Mean Absolute Deviation" , MAD))
View(movieData3)
lmfit2.movieData
log.movieData <- log(movieData3[, c(7,12:26,38)])
log.movieData
pca.movieData <- prcomp(log.movieData, center = TRUE, scale. = TRUE)
pca.movieData <- prcomp(log.movieData, center = TRUE, scale. = TRUE , na.pass(TRUE))
pca.movieData <- prcomp(log.movieData, center = TRUE, scale. = TRUE , na.action = na.pass)
pca.movieData <- prcomp( movieData3[, c(7,12:26,38)], center = TRUE, scale. = TRUE)
plot(pca.movieData, type = "l")
print(pca.movieData)
print(pca.movieData)
summary(pca.movieData)
pca.movieData <- prcomp( movieData3[, c(38,12:26,7)], center = TRUE, scale. = TRUE)
print(pca.movieData)
summary(pca.movieData)
plot(pca.movieData, type = "l")
trans = preProcess(movieData3[, c(38,12:26,7)], method=c("BoxCox", "center", "scale", "pca"))
pca.movieData <- prcomp( trans, center = TRUE, scale. = TRUE)
trans = preProcess(movieData3[,c(7,12:26,38)], method=c("BoxCox", "center", "scale", "pca"))
trans
summary(trans)
plot(trans)
trans$pcaComp
PC <- predict(trans,movieData3[,c(7,12:26,38)] )
PC
trans = preProcess(movieData3[,c(7,12:26,38)], method=c("BoxCox", "center", "scale", "pca"))
trans
trans$dim
trans$bc
plot(pca.movieData)
plot(pca.movieData, type = "l")
pca.movieData <- prcomp(movieData3[,c(7,12:26,38)], center = TRUE, scale. = TRUE)
print(pca.movieData)
names(pca.movieData)
summary(pca.movieData)
names(pca.movieData$rotation)
colnames(pca.movieData$rotation)
library(ggbiplot,vqv)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 1,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 2,var.scale = 2,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,3),obs.scale = 2,var.scale = 2,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 2,var.scale = 2,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),groups = as.factors(pca.movieData$rotation)obs.scale = 2,var.scale = 2,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),groups = as.factors(pca.movieData$rotation),obs.scale = 10,var.scale = 5,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 1,var.scale = 15,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = .1,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = .01,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
```
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 50,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 25,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot)
myplot = ggbiplot(pca.movieData,choices = c(1,2),obs.scale = 5,var.scale = 1,ellipse = TRUE,circle = TRUE)
myplot = myplot + scale_color_discrete(name = '')
myplot =  myplot + theme(legend.direction = 'horizontal', legend.position = 'top')
print(myplot
termplot(lmfit2.movieData)
termplot(lmfit2.movieData)
lines(lmfit2.movieData)
lines(lmfit2.movieData$fitted.values)
lines(lmfit2.movieData$fitted.values)
plot(movieData3)
boxplot(movieData3)
lmfit2.movieData
plot(movieData3$imdb_score, movieData3$tomatoUserRating, type="b", xlab="imdb score", ylab="tomato user rating")
plot(movieData3$imdb_score, movieData3$tomatoUserRating, xlab="imdb score", ylab="tomato user rating")
abline(1.103, 0.003114)
abline(lm(movieData3$imdb_score ~ movieData3$tomatoUserRating))
abline(1.103, 0.003114)
abline(1.103, 0.003114)
plot(movieData3$imdb_score, movieData3$tomatoUserRating, xlab="imdb score", ylab="tomato user rating")
abline(1.103, 0.003114)
abline(1.103, 1.003114)
abline(1.103, 0.03114)
abline(1.103, 0.03114)
plot(movieData3$imdb_score, movieData3$tomatoUserRating, xlab="imdb score", ylab="tomato user rating")
abline(1.103, 0.03114)
abline(1.103, 1.03114)
abline(1.103, 1)
plot(movieData3$imdb_score, movieData3$tomatoUserRating, xlab="imdb score", ylab="tomato user rating")
abline(1.103, 1)
plot(movieData3$imdb_score, movieData3$num_user_for_reviews, xlab="imdb score", ylab="tomato user rating")
abline(1.103, 1)
abline(0, 1)
abline(1, 1)
plot(movieData3$imdb_score, movieData3$num_user_for_reviews, xlab="imdb score", ylab="tomato user rating")
abline(0, 1)
abline(1, 2)
plot(movieData3$imdb_score, movieData3$num_user_for_reviews, xlab="imdb score", ylab="tomato user rating")
abline(1, 2)
