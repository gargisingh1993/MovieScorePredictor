v = c(1,4,4,3,2,2,3)
v[v<3]
v
v<3
[v<3]
v[v<3]
??run
floor(a)
ceiling(a)
a = runif(3, min=0, max=100)
floor(a)
ceiling(a)
round(a,4)
a = runif(3, min=0, max=100)
floor(a)
a = runif(3, min=0, max=100)
floor(a)
ceiling(a)
round(a,4)
data1=read.csv(file="~/Dropbox/Data_Science/RSlides/test.csv")
data3=read.csv("http://www.macalester.edu/~kaplan/ISM/datasets/swim100m.csv")
set.seed(123)
x=rnorm(100,mean=100,sd=10)
set.seed(234)
y=rnorm(100,mean=100,sd=10)
hist(x,breaks=20)
plot(x)
qqline(x)
qqnorm(x)
plot(x)
par(mfrow=c(2,2)) #setup layout
plot(rnorm(50),pch=17)
plot(rnorm(20),type="l",lty=5)
plot(rnorm(100),cex=0.5)
plot(rnorm(200),lwd=2)
plot(x)
par(mfrow=c(1,1)) #setup layout
plot(x)
x = matrix(1:20, nrow=5, ncol=4, byrow=TRUE)
y = matrix(1:20, nrow=5, ncol=4, byrow=FALSE)
y
x
x[1,4]
x[2,c(2,4)]
x[2,c(2,3,4)]
x[3:5, 2]
x[2,c(2:4)]
rnames=c("apple","banana","orange","melon","corn")
cnames=c("cat","dog","bird","pig")
rownames(x)=rnames
colnames(x)=cnames
x
diabetes = c("Type1", "Type2", "Type1", "Type1")
status = c("Poor", "Improved", "Excellent", "Poor")
patientdata = data.frame(patientID, age, diabetes, status)
patientdata
patientID = c(1, 2, 3, 4)
age = c(25, 34, 28, 52)
diabetes = c("Type1", "Type2", "Type1", "Type1")
status = c("Poor", "Improved", "Excellent", "Poor")
patientdata = data.frame(patientID, age, diabetes, status)
patientdata
patientdata[1:2,] #first two row
patientdata[1:2]  #first two column
View(patientdata)
View(x)
View(data3)
mylist = list(patientdata, swim, x)
mylist
mylist = list(patientdata, swim, x)
swim = read.csv("http://www.macalester.edu/~kaplan/ISM/datasets/swim100m.csv")
mylist = list(patientdata, swim, x)
mylist
swim
patiendata
x
mylist
mylist
mylist = list(patientdata, swim, x)
mylist
mylist[[3]][1:2,]
dat = data.frame(patientdata, swim) #won't work
attach(mtcars)
mtcars
attach(mtcars)
mtcars
attach(x)
for(i in 1:10){
print(i)
}
i = 1
while(i <= 10){
print(i)
i=i+1
}
while(i <= 10){
print(i)
i=i+2
}
print(i)
i = 1
while(i <= 10){
print(i)
i=i+2
}
feelings = c("sad", "afraid")
for (i in feelings){
print(
switch(i,
happy  = "I am glad you are happy",
afraid = "There is nothing to fear",
sad    = "Cheer up",
angry  = "Calm down now"
)
)
}
myfunction = function(x,a,b,c){
curve(myfunction(x,20,3,4),xlim=c(1,20))
myfeeling = function(x){
for (i in x){
print(
switch(i,
happy  = "I am glad you are happy",
afraid = "There is nothing to fear",
sad    = "Cheer up",
angry  = "Calm down now"
)
)
}
}
myfeeling = function(x){
for (i in x){
print(
switch(i,
happy  = "I am glad you are happy",
afraid = "There is nothing to fear",
sad    = "Cheer up",
angry  = "Calm down now"
)
)
}
}
myfeeling = function(x){
for (i in x){
print(
switch(i,
happy  = "I am glad you are happy",
afraid = "There is nothing to fear",
sad    = "Cheer up",
angry  = "Calm down now"
)
)
}
}
myfeeling = function(x){
for (i in x){
print(
switch(i,
happy  = "I am glad you are happy",
afraid = "There is nothing to fear",
sad    = "Cheer up",
angry  = "Calm down now"
)
)
}
}
head(mtcars)
summary(mtcars)
summary(mtcars)
mtcars
clear
exit
attach(mtcars)
table(cyl)
summary(mpg)
table(cut(mpg,seq(10,34,by=2)))
#Correlations
states = state.x77[,1:6]
cov(states)
var(states)
cor(states)
states
states = state.x77[,1:6]
states = state.x77[,1:6]
View(swim)
View(swim)
View(patientdata)
View(patientdata)
View(patientdata)
View(data3)
x = rnorm(100, mean = 10, sd = 1)
y = rnorm(100, mean = 30, sd = 10)
View(data3)
x = rnorm(100, mean = 10, sd = 1)
y = rnorm(100, mean = 30, sd = 10)
t.test(x, y, alt = "two.sided",paired=TRUE)
states = state.x77[,1:6]
cov(states)
par(mfrow=c(2,1))
boxplot(data[2:4],horizontal=TRUE)
boxplot(difference,horizontal=TRUE)
par(mfrow=c(1,1))
qqnorm(difference)
set.seed(123)
A = matrix(sample(100,15), nrow=5, ncol=3)
set.seed(234)
B = matrix(sample(100,15), nrow=5, ncol=3)
set.seed(321)
X = matrix(sample(100,25), nrow=5, ncol=5)
set.seed(213)
b = matrix(sample(100,5),nrow=5, ncol=1)
A
A + 2
t(A)
t(A)
B
t(A) %*% B
colMeans(A)
colSums(A)
rowMeans(A)
rowSums(A)
A
crossprod(A)
A %*% A
A * A
crossprod(A)
diag(A)
diag(X)
eigen(X)
?max
install.packages("twitteR")
install.packages("twitteR")
# importing the library
library(twitteR)
#setup the credentials
consumerKey <-	'hX7ACg00LwB0J00lcgDIUKgTK'
consumerSecret <- '	OnVothZz0nTdqi1hYK06WltcC1WX8WbQdGSJiTGlp7MappyCTx'
accessToken <- '465606029-Im9hqIUOOjfdT7nTUT25nDdsNi2EL4hfHCs3iT0h'
accessSecret <- 'hBn5Mov0bkQjXXwjzp08PLpJU9UbN1GeJNxdErK6PB2Ot'
# seting up the authentication
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
#getting data from the twitter api
tw <- searchTwitter("brooklyn nets", n = 100, lang = "en", resultType = "recent")
tw
consumerKey <-	'hX7ACg00LwB0J00lcgDIUKgTK'
consumerSecret <- '	OnVothZz0nTdqi1hYK06WltcC1WX8WbQdGSJiTGlp7MappyCTx'
accessToken <- '465606029-Im9hqIUOOjfdT7nTUT25nDdsNi2EL4hfHCs3iT0h'
accessSecret <- 'hBn5Mov0bkQjXXwjzp08PLpJU9UbN1GeJNxdErK6PB2Ot'
# seting up the authentication
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
consumerKey <-	'hX7ACg00LwB0J00lcgDIUKgTK'
consumerSecret <- 'OnVothZz0nTdqi1hYK06WltcC1WX8WbQdGSJiTGlp7MappyCTx'
accessToken <- '465606029-Im9hqIUOOjfdT7nTUT25nDdsNi2EL4hfHCs3iT0h'
accessSecret <- 'hBn5Mov0bkQjXXwjzp08PLpJU9UbN1GeJNxdErK6PB2Ot'
# seting up the authentication
setup_twitter_oauth(consumerKey, consumerSecret, accessToken, accessSecret)
#getting data from the twitter api
tw <- searchTwitter("brooklyn nets", n = 100, lang = "en", resultType = "recent")
tw
#data cleaning, we will use a new package called tm, choose 'no' while installing
install.packages("tm")
txV = sapply(tw, function(x)  x$getText())
txV
documents <- Corpus(VectorSource(twV))
documents <- Corpus(VectorSource(twV))
install.packages("tm")
library(tm)
# convert list to vector
txV = sapply(tw, function(x)  x$getText())
txV
# create a document collection (corpus) from the vector
documents <- Corpus(VectorSource(twV))
documents <- Corpus(VectorSource(txV))
#clean up the text
#defining a new function
#to remove the url links
removeURL <- function(x) gsub('http.*\\s*','',x)
documentsClean <- tm_map(documents, content_transformer(removeURL))
documentsClean <- tm_map(documentsClean, removePunctuation)
documentsClean <- tm_map(documentsClean, content_transformer(tolower))
documentsClean <- tm_map(documentsClean, content_transformer(toupper))
documentsClean <- tm_map(documentsClean, content_transformer(tolower))
documentsClean <- tm_map(documentsClean, removeWords, stopwords("english"))
documentsClean <- tm_map(documentsClean, removeNumbers)
documentsClean <- tm_map(documentsClean, stripWhitespace)
documentsClean <- tm_map(documentsClean, removeWords, c ("brooklyn", "nets", "brooklynnets"))
documentsClean <- tm_map(documentsClean, removeWords, c ("brooklyn", "nets", "brooklynnets", "nba"))
install.packages("wordcloud")
wordcloud(documentsClean)
wordcloud(documentsClean)
install.packages("wordcloud")
library(wordcloud)
wordcloud(documentsClean)
wordcloud(documentsClean, scale= c(1, 0.2))
wordcloud(documentsClean, scale= c(10, 0.5))
wordcloud(documentsClean, random.order = F, scale= c(10, 0.5))
wordcloud(documentsClean, random.order = F, scale= c(10, 0.5), col = rainbow())
wordcloud(documentsClean, random.order = F, scale= c(10, 0.5), col = rainbow(7))
# setting the working directory
setwd('/users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.csv('movie_data.xls')
head(data)
View(data)
# setting the working directory
setwd('/users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.table('movie_data.xls', header = TRUE)
head(data)
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.table('movie_data.xls', header = TRUE)
head(data)
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.table('movie_data.csv', header = TRUE)
head(data)
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.table('movie_data.xls', header = TRUE)
head(data)
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
data = read.table('movie_data.xls', header = TRUE, NA = TRUE)
head(data)
install.packages(gdata)
library(gdata)
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
mydata = read.xls("movie_data.xls")
View(mydata)
head(mydata)
class(mydata)
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
movieData = read.xls("movie_data.xls")
movieData(mydata)
sum(sciFic)
sciFic <- movieData$Sci.Fi
sum(sciFic)
movieCount
movieCount <- c()
for(i in 0:26)
{
movieCount[i] = i;
for(i in 0:26)
{
movieCount[i] = i;
}
movieCount
movieCount <- c()
for(i in 0:26)
{
movieCount[i] = i;
}
movieCount
movieCount <- c()
for(i in 0:26)
{
print(i)
movieCount[i] = i;
}
for (i in 2010:2015){
print(paste("The year is", i))
}
print("Hello")
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE)
# Chunk 2
# setting up the libraries
library(gdata)
# Chunk 3
# setting the working directory
# /Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data
setwd('/Users/kkiran/Desktop/fall_2016/fds/project/MovieScorePredictor/data/')
movieData = read.xls("movie_data.xls")
head(movieData)
# setting up the libraries
library(gdata)
print("af")
